# -*- coding: utf-8 -*-
"""task06.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1het_BXOa7Uu2e8JYfxUVUtSe2Yk0Mucx
"""


import urllib.request

url = 'https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2025-2026/refs/heads/master/Assignment4/course_materials/python/validation.py'
urllib.request.urlretrieve(url, 'validation.py')

from rdflib import Graph, Namespace, Literal, RDF, RDFS, XSD
from validation import Report

# Initialize
g = Graph()
r = Report()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)

print("✅ Libraries and validation loaded.")

# Create new prefixes (ontology and person)
ontology = Namespace("http://somewhere/ontology#")
person = Namespace("http://somewhere/person#")

g.namespace_manager.bind('ontology', ontology)
g.namespace_manager.bind('person', person)

print("✅ Prefixes created.")

# Create the classes and hierarchy
g.add((ontology.Person, RDF.type, RDFS.Class))
g.add((ontology.Person, RDFS.label, Literal("Person", datatype=XSD.string)))

g.add((ontology.Researcher, RDF.type, RDFS.Class))
g.add((ontology.Researcher, RDFS.label, Literal("Researcher", datatype=XSD.string)))
g.add((ontology.Researcher, RDFS.subClassOf, ontology.Person))

g.add((ontology.University, RDF.type, RDFS.Class))
g.add((ontology.University, RDFS.label, Literal("University", datatype=XSD.string)))

# Check validation
r.validate_task_06_01(g)
print("✅ Task 6.1 passed!")

# Property: worksIn (Researcher → University)
g.add((ontology.worksIn, RDF.type, RDF.Property))
g.add((ontology.worksIn, RDFS.label, Literal("worksIn", datatype=XSD.string)))
g.add((ontology.worksIn, RDFS.domain, ontology.Researcher))
g.add((ontology.worksIn, RDFS.range, ontology.University))

# Property: teachesCourse (Researcher → xsd:String)
g.add((ontology.teachesCourse, RDF.type, RDF.Property))
g.add((ontology.teachesCourse, RDFS.label, Literal("teachesCourse", datatype=XSD.string)))
g.add((ontology.teachesCourse, RDFS.domain, ontology.Researcher))
g.add((ontology.teachesCourse, RDFS.range, XSD.string))

# Property: email (Person → xsd:String)
g.add((ontology.email, RDF.type, RDF.Property))
g.add((ontology.email, RDFS.label, Literal("email", datatype=XSD.string)))
g.add((ontology.email, RDFS.domain, ontology.Person))
g.add((ontology.email, RDFS.range, XSD.string))

# Check validation
r.validate_task_06_02(g)
print("✅ Task 6.2 passed!")

# Individual: John (Researcher)
g.add((person.John, RDF.type, ontology.Researcher))
# Individual: UPM (University)
g.add((person.UPM, RDF.type, ontology.University))
# Relationships
g.add((person.John, ontology.worksIn, person.UPM))
g.add((person.John, ontology.teachesCourse, Literal("Knowledge Representation", datatype=XSD.string)))

# Check validation
r.validate_task_06_03(g)
print("✅ Task 6.3 passed!")

# Define FOAF-like properties manually
g.add((ontology.givenName, RDF.type, RDF.Property))
g.add((ontology.familyName, RDF.type, RDF.Property))
g.add((ontology.mbox, RDF.type, RDF.Property))

# Create person:Oscar
g.add((person.Oscar, RDF.type, ontology.Person))
g.add((person.Oscar, ontology.givenName, Literal("Oscar", datatype=XSD.string)))
g.add((person.Oscar, ontology.familyName, Literal("Lopez", datatype=XSD.string)))
g.add((person.Oscar, ontology.mbox, Literal("oscar@upm.es", datatype=XSD.string)))

# Validate and save report
r.validate_task_06_04(g)
r.save_report("_Task_06")
print("✅ Task 6.4 passed and report saved!")

